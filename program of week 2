  * asking for help until the thread is interrupted.
     */
    @Override
    public void run()
    {
        // Infinite loop.
        while(true)
        {
            try
            {
               // Program first.
               System.out.println("Student " + studentNum + " has started programming for " + programTime + " seconds.");
               t.sleep(programTime * 1000);
               System.out.println("Student " + studentNum + " is checking to see if TA is available.");
               if (available.tryAcquire())
               {
                   try
                   {
                       // Wakeup the TA.
                       wakeup.take();
                       System.out.println("Student " + studentNum + " has woke up the TA.");
                       System.out.println("Student " + studentNum + " has started working with the TA.");
                       t.sleep(5000);
                       System.out.println("Student " + studentNum + " has stopped working with the TA.");
                   }
                   catch (InterruptedException e)
                   {
                      
                       continue;
                   }
                   finally
                   {
                       available.release();
                   }
               }
               else
               {
                   // Check to see if any chairs are available.
                   System.out.println("Student " + studentNum + " could not see the TA.  Checking for available chairs.");
                   if (chairs.tryAcquire())
                   {
                       try
                       {
                           // Wait for TA to finish with other student.
                           System.out.println("Student " + studentNum + " is sitting outside the office.  "
                                   + "He is #" + ((3 - chairs.availablePermits())) + " in line.");
                           available.acquire();
                           System.out.println("Student " + studentNum + " has started working with the TA.");
                           t.sleep(5000);
                           System.out.println("Student " + studentNum + " has stopped working with the TA.");
                           available.release();
                       }
                       catch (InterruptedException e)
                       {
                         
                           continue;
                       }
                   }
                   else
                   {
                       System.out.println("Student " + studentNum + " could not see the TA and all chairs were taken.  Back to programming!");
                   }
               }
            }
            catch (InterruptedException e)
            {
                break;
            }
        }
    }
}

class TeachingAssistant implements Runnable
{
    
    private SignalSemaphore wakeup;
    private Semaphore chairs;

    
    private Semaphore available;

    // A reference to the current thread.
    private Thread t;
    
    public TeachingAssistant(SignalSemaphore w, Semaphore c, Semaphore a)
    {
        t = Thread.currentThread();
        wakeup = w;
        chairs = c;
        available = a;
    }
