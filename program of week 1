import java.util.concurrent.Semaphore;
import java.util.Random;

public class Main 
{
    public static void main(String[] args) 
    {
        // Number of students.
        int numberofStudents = 5;
        
        // Create semaphores.
        SignalSemaphore wakeup = new SignalSemaphore();
        Semaphore chairs = new Semaphore(3);
        Semaphore available = new Semaphore(1);
        
        
        // Used for randomly generating program time.
        Random studentWait = new Random();
        for (int i = 0; i < numberofStudents; i++)
        {
            Thread student = new Thread(new Student(studentWait.nextInt(20), wakeup, chairs, available, i+1));
            student.start();
        }
        Thread ta = new Thread(new TeachingAssistant(wakeup, chairs, available));
        ta.start();
    }
}


class SignalSemaphore {
    private boolean signal = false
    public synchronized void take() {
        this.signal = true;
        this.notify();
    }
    public synchronized void release() throws InterruptedException{
        while(!this.signal) wait();
        this.signal = false;
    }
}
class Student implements Runnable
{       
    // Time to program before asking for help (in seconds).
    private int programTime;
    private int studentNum;
    private SignalSemaphore wakeup;
    private Semaphore chairs;
    private Semaphore available;
    private Thread t;

   
    public Student(int program, SignalSemaphore w, Semaphore c, Semaphore a, int num)
    {
        programTime = program;    
        wakeup = w;
        chairs = c;
        available = a;
        studentNum = num;
        t = Thread.currentThread();
    }
